{
	// Place your Winter-2024 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Headers": {
		"scope": "cpp",
		"prefix": "header",
		"body": [
			"#include<bits/stdc++.h>",
			"using namespace std;",
			"$0"
		],
		"description": "Default code snippet"
	},
	"Iteration i": {
		"scope": "cpp",
		"prefix": "fori",
		"body": [
			"for(int i=1;i<=$1;i++)",
			"{",
			"    $0",
			"}"
		],
		"description": "for i",
		
	},
	"Iteration j": {
		"scope": "cpp",
		"prefix": "forj",
		"body": [
			"for(int j=1;j<=$1;j++)",
			"{",
			"    $0",
			"}"
		],
		"description": "for j",
		
	},
	"Iteration k": {
		"scope": "cpp",
		"prefix": "fork",
		"body": [
			"for(int k=1;k<=$1;k++)",
			"{",
			"    $0",
			"}"
		],
		"description": "for k",
		
	},
	"Read Number": {
        "prefix": "fastread",
        "body": [
            "template<typename T>",
            "void fr(T& num)", 
            "{", 
            "    char ch;",
            "    T sign=1;",
            "    ch=getchar_unlocked();",
            "    num=0;",
            "    while(ch>'9'||ch<'0')",
            "    {",
            "        if(ch=='-') sign=-1;",
            "        ch=getchar_unlocked();",
            "    }",
            "    while(isdigit(ch))",
            "    {",
            "        num=num*10+ch-'0';",
            "        ch=getchar_unlocked();",
            "    }",
            "    (num)*=sign;",
            "    return;",
            "}",
			"$0"
        ],
        "description": "Function to read a number from input"
    }
}